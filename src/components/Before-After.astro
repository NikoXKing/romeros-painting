---
import type { ImagesBeforeAfter } from "../types"

interface Props {
	data: ImagesBeforeAfter[]
}

const { data } = Astro.props
---

<!-- Slider main container -->
<div
	id='gallery-after-before'
	class='relative w-full mt-6'
	data-carousel='slide'
>
	<!-- Additional required wrapper -->
	<div
		class='relative h-56 overflow-hidden rounded-lg sm:h-64 xl:h-80 2xl:h-96'
	>
		<!-- Slides -->
		{
			data.map(({ after, before }, index) => (
				<div
					id={`carusel-${index}`}
					class='hidden duration-700 ease-in-out my-12 justify-center items-center elementos'
				>
					<two-up class='w-fit'>
						<div class='flex justify-center items-center'>
							<img
								class='object-cover w-[400px]'
								src={before.src}
								alt={before.alt}
							/>
						</div>
						<div class='flex justify-center items-center'>
							<img
								class='object-cover w-[400px]'
								src={after.src}
								alt={after.alt}
							/>
						</div>
					</two-up>
				</div>
			))
		}
	</div>
	<!-- Slider controls -->
	<button
		type='button'
		class='absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none'
		id='data-carousel-prev'
	>
		<span
			class='inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none'
		>
			<svg
				class='w-4 h-4 text-gray-800 rtl:rotate-180'
				aria-hidden='true'
				xmlns='http://www.w3.org/2000/svg'
				fill='none'
				viewBox='0 0 6 10'
			>
				<path
					stroke='currentColor'
					stroke-linecap='round'
					stroke-linejoin='round'
					stroke-width='2'
					d='M5 1 1 5l4 4'></path>
			</svg>
			<span class='sr-only'>Previous</span>
		</span>
	</button>
	<button
		type='button'
		class='absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none'
		id='data-carousel-next'
	>
		<span
			class='inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none'
		>
			<svg
				class='w-4 h-4 text-gray-800 rtl:rotate-180'
				aria-hidden='true'
				xmlns='http://www.w3.org/2000/svg'
				fill='none'
				viewBox='0 0 6 10'
			>
				<path
					stroke='currentColor'
					stroke-linecap='round'
					stroke-linejoin='round'
					stroke-width='2'
					d='m1 9 4-4-4-4'></path>
			</svg>
			<span class='sr-only'>Next</span>
		</span>
	</button>
</div>

<script>
	import { Carousel } from "flowbite"
	import type {
		InstanceOptions,
		CarouselOptions,
		CarouselInterface
	} from "flowbite"

	const carouselElement = document.getElementById("gallery-after-before")

	const numberItems = document.querySelectorAll(".elementos").length

	let items = []

	for (let i = 0; i < numberItems; i++) {
		let obj = {
			position: i,
			el: document.getElementById(`carusel-${i}`)
		}
		items[i] = obj
	}

	//TODO: Revisar las transiciones del carousel
	const options: CarouselOptions = {
		defaultPosition: 0,
		interval: 2500,
		onChange: function (carrusel: CarouselInterface) {
			const { el: elmentActive } = carrusel._activeItem
			elmentActive.classList.add("flex", "ease-linear", "duration-300")

			carrusel._items.map((element) => {
				if (element.el !== elmentActive) {
					element.el.classList.remove("flex")
				}
			})
		}
	}

	const instanceOptions: InstanceOptions = {
		id: "gallery-after-before",
		override: true
	}

	const carousel: CarouselInterface = new Carousel(
		carouselElement,
		//@ts-ignore
		items,
		options,
		instanceOptions
	)
	// set event listeners for prev and next buttons
	const $prevButton = document.getElementById(
		"data-carousel-prev"
	) as HTMLElement
	const $nextButton = document.getElementById(
		"data-carousel-next"
	) as HTMLElement

	$prevButton.addEventListener("click", () => {
		carousel.prev()
	})

	$nextButton.addEventListener("click", () => {
		carousel.next()
	})
</script>
